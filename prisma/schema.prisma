// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    displayName   String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    tables        Tables[]
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Tables {
    id      String   @id @default(cuid())
    User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    name    String
    top     Float
    left    Float
    columns Column[]

    @@index([userId])
}

model Column {
    id       String  @id @default(cuid())
    table    Tables  @relation(fields: [tableId], references: [id], onDelete: Cascade) //, onDelete: Cascade) 
    tableId  String
    type     String
    name     String
    rows     Rows[]
    columnId String?

    @@index([tableId])
}

// enum types {
//     VarChar
//     Int
//     Float
//     Date
// }
model Rows {
    id       String  @id @default(cuid())
    column   Column  @relation(fields: [columnId], references: [id], onDelete: Cascade) //, onDelete: Cascade)
    columnId String
    cells    Cells[]

    @@index([columnId])
}

model Cells {
    id     String @id @default(cuid())
    rows   Rows   @relation(fields: [rowsId], references: [id], onDelete: Cascade) //, onDelete: Cascade)
    rowsId String
    data   String

    @@index([rowsId])
}
